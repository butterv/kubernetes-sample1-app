// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_persistence is a generated GoMock package.
package mock_persistence

import (
	context "context"
	reflect "reflect"

	model "github.com/butterv/kubernetes-sample1-app/app/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryAccess is a mock of UserRepositoryAccess interface.
type MockUserRepositoryAccess struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryAccessMockRecorder
}

// MockUserRepositoryAccessMockRecorder is the mock recorder for MockUserRepositoryAccess.
type MockUserRepositoryAccessMockRecorder struct {
	mock *MockUserRepositoryAccess
}

// NewMockUserRepositoryAccess creates a new mock instance.
func NewMockUserRepositoryAccess(ctrl *gomock.Controller) *MockUserRepositoryAccess {
	mock := &MockUserRepositoryAccess{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryAccess) EXPECT() *MockUserRepositoryAccessMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockUserRepositoryAccess) FindByID(ctx context.Context, id model.UserID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserRepositoryAccessMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserRepositoryAccess)(nil).FindByID), ctx, id)
}

// FindByIDs mocks base method.
func (m *MockUserRepositoryAccess) FindByIDs(ctx context.Context, ids []model.UserID) (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockUserRepositoryAccessMockRecorder) FindByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockUserRepositoryAccess)(nil).FindByIDs), ctx, ids)
}

// MockUserRepositoryModify is a mock of UserRepositoryModify interface.
type MockUserRepositoryModify struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryModifyMockRecorder
}

// MockUserRepositoryModifyMockRecorder is the mock recorder for MockUserRepositoryModify.
type MockUserRepositoryModifyMockRecorder struct {
	mock *MockUserRepositoryModify
}

// NewMockUserRepositoryModify creates a new mock instance.
func NewMockUserRepositoryModify(ctrl *gomock.Controller) *MockUserRepositoryModify {
	mock := &MockUserRepositoryModify{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryModifyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryModify) EXPECT() *MockUserRepositoryModifyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryModify) Create(ctx context.Context, id model.UserID, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryModifyMockRecorder) Create(ctx, id, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryModify)(nil).Create), ctx, id, email)
}

// DeleteByID mocks base method.
func (m *MockUserRepositoryModify) DeleteByID(ctx context.Context, id model.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUserRepositoryModifyMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUserRepositoryModify)(nil).DeleteByID), ctx, id)
}
